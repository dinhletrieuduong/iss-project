SET SERVEROUTPUT ON

CREATE OR REPLACE PROCEDURE SP_ENCRYPTDATA (
  INPUT_STRING VARCHAR2, 
  ENCRYPTED_RAW OUT RAW, 
  KEY_BYTES_RAW RAW)
AS
  NUM_KEY_BYTES NUMBER := 256/8;
  ENCRYPTION_TYPE PLS_INTEGER := DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5;
BEGIN
  ENCRYPTED_RAW := DBMS_CRYPTO.ENCRYPT
  (
    SRC => UTL_I18N.STRING_TO_RAW (INPUT_STRING, 'AL32UTF8'),
    TYP => ENCRYPTION_TYPE,
    KEY => KEY_BYTES_RAW
  );
END;
/

CREATE OR REPLACE PROCEDURE SP_DECRYPTDATA (
  OUTPUT_STRING OUT VARCHAR2, 
  ENCRYPTED_RAW RAW, 
  KEY_BYTES_RAW RAW)
AS
  NUM_KEY_BYTES NUMBER := 256/8;
  DECRYPTED_RAW RAW (2000);
  ENCRYPTION_TYPE PLS_INTEGER := DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5;
BEGIN
  DECRYPTED_RAW := DBMS_CRYPTO.DECRYPT
  (
    SRC => ENCRYPTED_RAW,
    TYP => ENCRYPTION_TYPE,
    KEY => KEY_BYTES_RAW
  );
  OUTPUT_STRING := UTL_I18N.RAW_TO_CHAR (DECRYPTED_RAW, 'AL32UTF8');
END;
/

CREATE OR REPLACE FUNCTION FN_DECRYPTDATA (
  ENCRYPTED_DATA RAW
) 
RETURN VARCHAR2
AS
  OUTPUT_STRING VARCHAR2(200);
  KEY_BYTES RAW(32);
BEGIN
  SELECT USER_KEY INTO KEY_BYTES FROM COURSEMAN.LUU_KEY;
  SP_DECRYPTDATA(OUTPUT_STRING, ENCRYPTED_DATA, KEY_BYTES);
  RETURN OUTPUT_STRING;
END;

GRANT EXECUTE ON SP_ENCRYPTDATA TO PUBLIC;
GRANT EXECUTE ON SP_DECRYPTDATA TO PUBLIC;
GRANT EXECUTE ON FN_DECRYPTDATA TO PUBLIC;
GRANT SELECT ON COURSEMAN.LUU_KEY TO PUBLIC;

/*
declare
  input_string VARCHAR2 (200) := 'Secret Message';
  output_string VARCHAR2 (200);
  encrypted_raw RAW (2000); -- stores encrypted binary text
  decrypted_raw RAW (2000); -- stores decrypted binary text
  num_key_bytes NUMBER := 256/8; -- key length 256 bits (32 bytes)
  key_bytes_raw RAW (32) := DBMS_CRYPTO.RANDOMBYTES (num_key_bytes); -- stores 256-bit encryption key
begin
  SP_ENCRYPTDATA(input_string, encrypted_raw, key_bytes_raw);
  DBMS_OUTPUT.put_line(ENCRYPTED_RAW);
  SP_DECRYPTDATA(output_string, encrypted_raw, key_bytes_raw);
  DBMS_OUTPUT.put_line(output_string);
end;
/ */
